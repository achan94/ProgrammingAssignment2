setwd("~/")
install.packages(c("slidify", "gpplot2", "devtools"))
find.package("devtools")
find.package("devtools")
library(devtools)
find_rtools()
library(gpplot2)
library(ggplot2)
install.packages("ggplot2")
find.package("ggplot2")
library(ggplot2)
library(slidify)
find.package("slidify")
install.packages("slidify")
find_rtools()
find.package("ggplot2")
find.package("devtools")
find.package("slidify")
install.packages("slidify")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
find.package("slidify")
library(slidify)
instal.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
getwd()
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
mean(cbind(c(1,0),c(0,1))
c
matrix(1:4,2,2)
x <- matrix(1:4,2,2)
source("cachematrix.R")
makeCachematrix(x)
makeCacheMatrix(x)
cacheSolve(x)
result <- makeCacheMatrix(x)
cacheSolve(result)
result <- makeCacheMatrix(x)
cacheSolve(result)
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
result <- makeCacheMatrix(x)
cacheSolve(result)
result <- makeCacheMatrix(x)
result
x <- matrix(1:4,2,2)
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
func <- makeCacheMatrix()
func(x)
result <- makeCacheMatrix(x)
result
result$get()
result$getinverse
result$setinverse()
final <- cacheSolve(result)
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix(x)
rsult
result
final <- cacheSolve(result)
result$set
result$get()
result$get
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix(x)
result$get()
result$set()
result$set
rsult$getinverse()
result$getinverse()
result$get()
final <- cacheSolve(result)
x <- matrix(1:4,2,2)
dim(x)
dim(x,1)
y <- c(dim(x),1)
y
dim(2)
dim(x)
(dim(x),1)
dim(x),1
dim(x)$1
dim(x)[1]
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
result <- makeCacheMatrix(x)
final <- cacheSolve(result)
final <- cacheSolve(result)
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
result
final <- cacheSolve(result)
final
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
result
final <- cacheSolve(result)
final
final
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
final <- cacheSolve(result)
final
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
result
cacheSolve(result)
try <- cacheSolve(result)
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
result
final <- cacheSolve(result)
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
result <- makeCacheMatrix (x)
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
result
final <- cacheSolve(result)
final
print(result)
result$get()
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
final <- cacheSolve(result)
final
setwd("C:/Users/Albert Chandra/Documents/Coursera/R-Programming/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
result <- makeCacheMatrix (x)
final <- cacheSolve(result)
final
trial <- cacheSolve (result)
trial
